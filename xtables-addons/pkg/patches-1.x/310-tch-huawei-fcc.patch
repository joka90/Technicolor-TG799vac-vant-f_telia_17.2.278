diff -Nru a/extensions/Kbuild b/extensions/Kbuild
--- a/extensions/Kbuild	2017-03-07 10:26:13.155775402 +0100
+++ b/extensions/Kbuild	2017-03-07 10:27:47.955705065 +0100
@@ -35,6 +35,7 @@
 obj-${build_quota2}      += xt_quota2.o
 obj-${build_rtsp}        += rtsp/
 obj-${build_LUA}         += LUA/
+obj-${build_huawei_fcc}  += huawei_fcc/
 
 -include ${M}/*.Kbuild
 -include ${M}/Kbuild.*
diff -Nru a/extensions/huawei_fcc/Kbuild b/extensions/huawei_fcc/Kbuild
--- a/extensions/huawei_fcc/Kbuild	1970-01-01 01:00:00.000000000 +0100
+++ b/extensions/huawei_fcc/Kbuild	2017-03-07 10:27:47.955705065 +0100
@@ -0,0 +1,4 @@
+# -*- Makefile -*-
+
+obj-m += nf_nat_huawei_fcc.o
+obj-m += nf_conntrack_huawei_fcc.o
diff -Nru a/extensions/huawei_fcc/nf_conntrack_huawei_fcc.c b/extensions/huawei_fcc/nf_conntrack_huawei_fcc.c
--- a/extensions/huawei_fcc/nf_conntrack_huawei_fcc.c	1970-01-01 01:00:00.000000000 +0100
+++ b/extensions/huawei_fcc/nf_conntrack_huawei_fcc.c	2017-03-07 10:28:38.490775608 +0100
@@ -0,0 +1,267 @@
+/* Connection tracking module for Huawei Fast Channel Change proprietary
+ * RTCP extension. Huawei FCC is a deviation from
+ *   http://tools.ietf.org/html/draft-ietf-avt-rapid-acquisition-for-rtp
+ */
+
+#include <linux/types.h>
+#include <asm/byteorder.h>
+#include <linux/module.h>
+#include <linux/moduleparam.h>
+#include <linux/netfilter.h>
+#include <linux/ip.h>
+#include <linux/slab.h>
+#include <linux/ctype.h>
+#include <linux/inet.h>
+#include <net/checksum.h>
+#include <net/udp.h>
+
+#include <net/netfilter/nf_conntrack.h>
+#include <net/netfilter/nf_conntrack_expect.h>
+#include <net/netfilter/nf_conntrack_ecache.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include "nf_conntrack_huawei_fcc.h"
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Alin Nastac <alin.nastac@gmail.com>");
+MODULE_DESCRIPTION("RTCP Huawei FCC connection tracking helper");
+MODULE_ALIAS("ip_conntrack_huawei_fcc");
+MODULE_ALIAS_NFCT_HELPER("huawei_fcc");
+
+#define MAX_PORTS 8
+static u_int16_t ports[MAX_PORTS];
+static unsigned int ports_c;
+module_param_array(ports, ushort, &ports_c, 0400);
+
+unsigned int (*nf_nat_huawei_fcc_hook)(struct sk_buff *skb,
+				       enum ip_conntrack_info ctinfo,
+				       unsigned int rsraddroff,
+				       struct nf_conntrack_expect *rtcpexp,
+				       struct nf_conntrack_expect *rtpexp);
+EXPORT_SYMBOL_GPL(nf_nat_huawei_fcc_hook);
+
+#define RTP_VERSION    2
+
+enum rtcp_type {
+	RTCP_SR    = 200,
+	RTCP_RR    = 201,
+	RTCP_SDES  = 202,
+	RTCP_BYE   = 203,
+	RTCP_APP   = 204,
+	RTCP_RTPFB = 205,
+};
+
+enum rtpfb_type {
+	RTPFB_RSR = 5,
+	RTPFB_RSI = 6,
+	RTPFB_SRA = 7,
+	RTPFB_SCN = 8,
+	RTPFB_SCR = 9,
+};
+
+struct rtcp_common_hdr {
+#if defined(__LITTLE_ENDIAN_BITFIELD)
+	__u8     count:5,
+		   pad:1,
+	       version:2;
+#elif defined (__BIG_ENDIAN_BITFIELD)
+	__u8   version:2,
+		   pad:1,
+		 count:5;
+#else
+#error  "Please fix <asm/byteorder.h>"
+#endif
+	__u8   type;        /* RTCP packet type */
+	__be16 length;      /* RTCP packet length in 32-bit words, w/o this header */
+} __attribute__((packed));
+
+struct rtpfb_rsr_hdr {
+	__be32 sender_ssrc;
+	__be32 media_source_ssrc;
+	__be32 bitrate;
+	__be32 ssrc;
+	__be32 rx_address;
+	__be16 rx_port;
+	__be16 unknown_nat_agnostic;
+} __attribute__((packed));
+
+static int help(struct sk_buff *skb,
+                unsigned int protoff,
+                struct nf_conn *ct,
+                enum ip_conntrack_info ctinfo)
+{
+	struct rtcp_common_hdr *rtcph, _rtcph;
+	struct rtpfb_rsr_hdr *rsrh, _rsrh;
+	int ret, dir = CTINFO2DIR(ctinfo);
+	unsigned int uninitialized_var(rsraddroff);
+	struct nf_conntrack_expect *rtcpexp, *rtpexp;
+	union nf_inet_addr *daddr;
+	__be16 sport, dport, rtcplen;
+	typeof(nf_nat_huawei_fcc_hook) nf_nat_huawei_fcc;
+
+	rtcph = skb_header_pointer(skb, protoff + sizeof(struct udphdr), sizeof(_rtcph), &_rtcph);
+	if (rtcph == NULL) {
+		pr_debug("conntrack_huawei_fcc: failed to read RTCP common header\n");
+		return NF_ACCEPT;
+	}
+
+	/* validate RTCP header */
+	if (rtcph->version != RTP_VERSION) {
+		pr_debug("conntrack_huawei_fcc: invalid RTCP version (%d)\n",
+				rtcph->version);
+		return NF_ACCEPT;
+	}
+	rtcplen = rtcph->length;
+	if (protoff + sizeof(struct udphdr) + sizeof(_rtcph) + ntohs(rtcplen) * 4 > skb->len) {
+		pr_debug("conntrack_huawei_fcc: invalid RTCP length (%d vs %d)\n",
+				protoff + sizeof(struct udphdr) + sizeof(_rtcph) + ntohs(rtcplen) * 4,
+				skb->len);
+		return NF_ACCEPT;
+	}
+
+	/* handle BYE messages */
+	if (rtcph->type == RTCP_BYE && ntohs(rtcplen) > 0) {
+		/* Destroy all pending expectations */
+		nf_ct_remove_expectations(ct);
+
+		return NF_ACCEPT;
+	}
+
+	/* filter out any other messages but valid RSRs */
+	if (rtcph->type != RTCP_RTPFB) {
+		pr_debug("conntrack_huawei_fcc: skip RTCP packet type %d\n",
+				rtcph->type);
+		return NF_ACCEPT;
+	}
+	if (rtcph->count != RTPFB_RSR) {
+		pr_debug("conntrack_huawei_fcc: skip RTPFB type %d\n",
+				rtcph->count);
+		return NF_ACCEPT;
+	}
+	if (ntohs(rtcplen) * 4 != sizeof(_rsrh)) {
+		pr_debug("conntrack_huawei_fcc: skip unknown RSR message format\n");
+		return NF_ACCEPT;
+	}
+	rsrh = skb_header_pointer(skb, protoff + sizeof(struct udphdr) + sizeof(_rtcph),
+			sizeof(_rsrh), &_rsrh);
+	if (rsrh == NULL) {
+		pr_debug("conntrack_huawei_fcc: failed to read RSR header\n");
+		return NF_ACCEPT;
+	}
+
+	rtcpexp = nf_ct_expect_alloc(ct);
+	rtpexp = nf_ct_expect_alloc(ct);
+	if (rtcpexp == NULL || rtpexp == NULL) {
+		pr_debug("conntrack_huawei_fcc: failed to allocate expected connection\n");
+		if (rtcpexp != NULL)
+			nf_ct_expect_put(rtcpexp);
+		if (rtpexp != NULL)
+			nf_ct_expect_put(rtpexp);
+		return NF_ACCEPT;
+	}
+
+	daddr = &ct->tuplehash[!dir].tuple.dst.u3;
+
+	/* unicast RTCP connection prediction (handles RSI) */
+	dport = ct->tuplehash[!dir].tuple.dst.u.udp.port;
+	sport = ct->tuplehash[!dir].tuple.src.u.udp.port;
+	pr_debug("conntrack_huawei_fcc: predict RTCP connection *.*.*.*:%u -> %pI4:%u\n",
+		 ntohs(sport), &daddr->ip, ntohs(dport));
+
+	nf_ct_expect_init(rtcpexp, NF_CT_EXPECT_CLASS_DEFAULT, PF_INET,
+			  NULL, daddr,
+			  IPPROTO_UDP, &sport, &dport);
+
+	/* unicast RTP connection prediction (port = RTCP_port - 1) */
+	dport = htons( ntohs( ct->tuplehash[!dir].tuple.dst.u.udp.port ) - 1 );
+	sport = htons( ntohs( ct->tuplehash[!dir].tuple.src.u.udp.port ) - 1 );
+	pr_debug("conntrack_huawei_fcc: predict RTP connection *.*.*.*:%u -> %pI4:%u\n",
+		 ntohs(sport), &daddr->ip, ntohs(dport));
+
+	nf_ct_expect_init(rtpexp, NF_CT_EXPECT_CLASS_DEFAULT, PF_INET,
+			  NULL, daddr,
+			  IPPROTO_UDP, &sport, &dport);
+
+	/* Now, NAT might want to mangle the packet, and register the
+	 * (possibly changed) expectation itself. */
+	nf_nat_huawei_fcc = rcu_dereference(nf_nat_huawei_fcc_hook);
+	if (nf_nat_huawei_fcc && (ct->status & IPS_NAT_MASK)) {
+		ret = nf_nat_huawei_fcc(skb, ctinfo,
+				sizeof(_rtcph) + offsetof(struct rtpfb_rsr_hdr, rx_address),
+				rtcpexp, rtpexp);
+	}
+	else {
+		if (nf_ct_expect_related(rtcpexp) != 0)
+			pr_debug("conntrack_huawei_fcc: failed to create expected RTCP connection\n");
+		if (nf_ct_expect_related(rtpexp) != 0)
+			pr_debug("conntrack_huawei_fcc: failed to create expected RTP connection\n");
+		ret = NF_ACCEPT; /* ignore nf_ct_expect_related() failures */
+	}
+
+	nf_ct_expect_put(rtcpexp);
+	nf_ct_expect_put(rtpexp);
+
+	return ret;
+}
+
+static struct nf_conntrack_helper huawei_fcc[MAX_PORTS] __read_mostly;
+static char huawei_fcc_names[MAX_PORTS][sizeof("huawei_fcc-65535")] __read_mostly;
+
+static const struct nf_conntrack_expect_policy huawei_fcc_exp_policy = {
+	.max_expected = 2,
+	.timeout  = 5 /* sec */,
+};
+
+static void nf_conntrack_huawei_fcc_fini(void)
+{
+	int i;
+	for (i = 0; i < ports_c; i++) {
+		if (huawei_fcc[i].me == NULL)
+			continue;
+
+		pr_debug("conntrack_huawei_fcc: unregistering helper for "
+				"port: %d\n",
+				ports[i]);
+		nf_conntrack_helper_unregister(&huawei_fcc[i]);
+	}
+}
+
+static int __init nf_conntrack_huawei_fcc_init(void)
+{
+	int i, ret = 0;
+	char *tmpname;
+
+	if (ports_c == 0)
+		ports[ports_c++] = HUAWEI_FCC_PORT;
+
+	for (i = 0; i < ports_c; i++) {
+		huawei_fcc[i].tuple.src.l3num = PF_INET;
+		huawei_fcc[i].tuple.src.u.udp.port = htons(ports[i]);
+		huawei_fcc[i].tuple.dst.protonum = IPPROTO_UDP;
+		huawei_fcc[i].expect_policy = &huawei_fcc_exp_policy;
+		huawei_fcc[i].me = THIS_MODULE;
+		huawei_fcc[i].help = help;
+		tmpname = &huawei_fcc_names[i][0];
+		if (ports[i] == HUAWEI_FCC_PORT)
+			sprintf(tmpname, "huawei_fcc");
+		else
+			sprintf(tmpname, "huawei_fcc-%d", ports[i]);
+		huawei_fcc[i].name = tmpname;
+
+		pr_debug("conntrack_huawei_fcc: registering helper for "
+				"port: %d\n",
+				ports[i]);
+		ret = nf_conntrack_helper_register(&huawei_fcc[i]);
+		if (ret) {
+			printk(KERN_ERR "conntrack_huawei_fcc: failed to register"
+					" helper for port: %d\n",
+					ports[i]);
+			nf_conntrack_huawei_fcc_fini();
+			return ret;
+		}
+	}
+
+	return 0;
+}
+
+module_init(nf_conntrack_huawei_fcc_init);
+module_exit(nf_conntrack_huawei_fcc_fini);
diff -Nru a/extensions/huawei_fcc/nf_conntrack_huawei_fcc.h b/extensions/huawei_fcc/nf_conntrack_huawei_fcc.h
--- a/extensions/huawei_fcc/nf_conntrack_huawei_fcc.h	1970-01-01 01:00:00.000000000 +0100
+++ b/extensions/huawei_fcc/nf_conntrack_huawei_fcc.h	2017-03-07 10:27:47.956803444 +0100
@@ -0,0 +1,20 @@
+#ifndef _NF_CONNTRACK_HUAWEI_FCC_H
+#define _NF_CONNTRACK_HUAWEI_FCC_H
+/* Huawei FCC tracking. */
+
+#ifdef __KERNEL__
+
+#define HUAWEI_FCC_PORT	8000
+
+struct nf_conntrack_expect;
+
+/* For NAT to hook in when we find a packet which describes what other
+ * connection we should expect. */
+extern unsigned int (*nf_nat_huawei_fcc_hook)(struct sk_buff *skb,
+				              enum ip_conntrack_info ctinfo,
+					      unsigned int rsraddroff,
+				              struct nf_conntrack_expect *rtcpexp,
+					      struct nf_conntrack_expect *rtpexp);
+#endif /* __KERNEL__ */
+
+#endif /* _NF_CONNTRACK_HUAWEI_FCC_H */
diff -Nru a/extensions/huawei_fcc/nf_nat_huawei_fcc.c b/extensions/huawei_fcc/nf_nat_huawei_fcc.c
--- a/extensions/huawei_fcc/nf_nat_huawei_fcc.c	1970-01-01 01:00:00.000000000 +0100
+++ b/extensions/huawei_fcc/nf_nat_huawei_fcc.c	2017-03-07 10:27:47.956803444 +0100
@@ -0,0 +1,121 @@
+/* NAT module for Huawei's Fast Channel Change proprietary RTCP extension */
+
+#include <linux/module.h>
+#include <linux/version.h>
+#include <linux/ip.h>
+#include <linux/udp.h>
+#include <linux/netfilter_ipv4.h>
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0)
+# include <net/netfilter/nf_nat.h>
+#else
+# include <net/netfilter/nf_nat_rule.h>
+#endif
+#include <net/netfilter/nf_nat_helper.h>
+#include <net/netfilter/nf_conntrack_helper.h>
+#include <net/netfilter/nf_conntrack_expect.h>
+#include "nf_conntrack_huawei_fcc.h"
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("Alin Nastac <alin.nastac@gmail.com>");
+MODULE_DESCRIPTION("RTCP Huawei FCC NAT helper");
+MODULE_ALIAS("ip_nat_huawei_fcc");
+
+/* Setup NAT on this expected conntrack so it follows master but expect the src ip. */
+/* If we fail to get a free NAT slot, we'll get dropped on confirm */
+static void nf_nat_follow_master_nosrc(struct nf_conn *ct,
+                                       struct nf_conntrack_expect *exp)
+{
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0) || LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0)
+	struct nf_nat_range range;
+#else
+	struct nf_nat_ipv4_range range;
+#endif
+
+	/* This must be a fresh one. */
+	BUG_ON(ct->status & IPS_NAT_DONE_MASK);
+
+	/* For DST manip, map port here to where it's expected. */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0)
+	range.min_proto = range.max_proto = exp->saved_proto;
+	range.min_addr = range.max_addr
+		= ct->master->tuplehash[!exp->dir].tuple.src.u3.ip;
+#else
+	range.min = range.max = exp->saved_proto;
+	range.min_ip = range.max_ip
+		= ct->master->tuplehash[!exp->dir].tuple.src.u3.ip;
+#endif
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,3,0)
+	range.flags = (NF_NAT_RANGE_MAP_IPS | NF_NAT_RANGE_PROTO_SPECIFIED);
+	nf_nat_setup_info(ct, &range, NF_NAT_MANIP_DST);
+#else
+	range.flags = (IP_NAT_RANGE_MAP_IPS | IP_NAT_RANGE_PROTO_SPECIFIED);
+	nf_nat_setup_info(ct, &range, IP_NAT_MANIP_DST);
+#endif
+}
+
+static unsigned int nf_nat_huawei_fcc(struct sk_buff *skb,
+                                      enum ip_conntrack_info ctinfo,
+                                      unsigned int rsraddroff,
+                                      struct nf_conntrack_expect *rtcpexp,
+                                      struct nf_conntrack_expect *rtpexp)
+{
+	int res, dir = CTINFO2DIR(ctinfo);
+	struct nf_conn *ct = rtcpexp->master;
+	struct {
+		__be32 rx_address;
+		__be16 rx_port;
+	} __attribute__((packed)) newaddr;
+
+	newaddr.rx_address = rtcpexp->tuple.dst.u3.ip;
+	newaddr.rx_port = rtcpexp->tuple.dst.u.udp.port;
+
+	rtcpexp->saved_proto.udp.port = ct->tuplehash[dir].tuple.src.u.udp.port;
+	rtcpexp->dir = !dir;
+	rtcpexp->expectfn = nf_nat_follow_master_nosrc;
+
+	/* RTP_port = RTCP_port - 1 */
+	rtpexp->saved_proto.udp.port = htons( ntohs( ct->tuplehash[dir].tuple.src.u.udp.port ) - 1 );
+	rtpexp->dir = !dir;
+	rtpexp->expectfn = nf_nat_follow_master_nosrc;
+
+	/* Create expected connections */
+	pr_debug("nat_huawei_fcc: create expected connections\n");
+	res = nf_ct_expect_related(rtcpexp);
+	if (res != 0) {
+		pr_debug("nat_huawei_fcc: failed to create RTCP expected connection\n");
+		return NF_DROP;
+	}
+	res = nf_ct_expect_related(rtpexp);
+	if (res != 0) {
+		pr_debug("nat_huawei_fcc: failed to create RTP expected connection\n");
+		nf_ct_unexpect_related(rtcpexp);
+		return NF_DROP;
+	}
+
+	/* Mangle RSR payload */
+	if (!nf_nat_mangle_udp_packet(skb, ct, ctinfo, rsraddroff,
+				      sizeof(newaddr), (char *)&newaddr, sizeof(newaddr))) {
+		pr_debug("nat_huawei_fcc: failed to mangle udp payload\n");
+		nf_ct_unexpect_related(rtcpexp);
+		nf_ct_unexpect_related(rtpexp);
+		return NF_DROP;
+	}
+
+	return NF_ACCEPT;
+}
+
+static void __exit nf_nat_huawei_fcc_fini(void)
+{
+	RCU_INIT_POINTER(nf_nat_huawei_fcc_hook, NULL);
+	synchronize_rcu();
+}
+
+static int __init nf_nat_huawei_fcc_init(void)
+{
+	BUG_ON(nf_nat_huawei_fcc_hook != NULL);
+	RCU_INIT_POINTER(nf_nat_huawei_fcc_hook, nf_nat_huawei_fcc);
+	return 0;
+}
+
+module_init(nf_nat_huawei_fcc_init);
+module_exit(nf_nat_huawei_fcc_fini);
diff -Nru a/mconfig b/mconfig
--- a/mconfig	2017-03-07 10:26:13.155775402 +0100
+++ b/mconfig	2017-03-07 10:27:47.956803444 +0100
@@ -28,3 +28,4 @@
 build_quota2=m
 build_rtsp=m
 build_LUA=m
+build_huawei_fcc=m
