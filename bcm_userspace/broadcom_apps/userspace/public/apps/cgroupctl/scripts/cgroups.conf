#!/bin/sh

# this script is called from /etc/rc3.d/S27cgroups
# The value of CPUTREEDIR must be kept in sync with cgroupctl/Makefile and
# cms_params.h

CPUTREEDIR=/cgroups/cputree

mount -t cgroup -o cpu cputree ${CPUTREEDIR}

# This config file is the superset of all possible CPU groups we can think of.
# The settings here are designed for engineering test and verification only.
# Each customer will probably have to create their own customized file to
# suite their requirements.  Copy this file to cgroup.conf.custom and 
# edit the settings in that file.  (When the Makefile sees
# cgroups.conf.custom, it will automatically use that instead of the default
# cgroups.conf

# If cgroups is enabled in the system build, use menuconfig to change
# the "Scheduler RT period" and "Scheduler RT runtime" to 200000us for better
# granularity.  If you use a different value, the values below will also
# have to be adjusted accordingly.

# Generic function to create a group and configure it.
allocateCpu() {
	mkdir -p ${CPUTREEDIR}/$1
	echo $2 > ${CPUTREEDIR}/$1/cpu.shares
	test -e ${CPUTREEDIR}/$1/cpu.rt_runtime_us && echo $3 > ${CPUTREEDIR}/$1/cpu.rt_runtime_us

	test -e ${CPUTREEDIR}/$1/cpu.bcm_rt_runtimes_us && echo $5,$9 > ${CPUTREEDIR}/$1/cpu.bcm_rt_runtimes_us
	test -e ${CPUTREEDIR}/$1/cpu.bcm_rt_min_runtimes_us && echo $4,$8 > ${CPUTREEDIR}/$1/cpu.bcm_rt_min_runtimes_us
	test -e ${CPUTREEDIR}/$1/cpu.bcm_rt_max_runtimes_us && echo $6,$10 > ${CPUTREEDIR}/$1/cpu.bcm_rt_max_runtimes_us
	test -e ${CPUTREEDIR}/$1/cpu.bcm_rt_steal_pos && echo $7,$11 > ${CPUTREEDIR}/$1/cpu.bcm_rt_steal_pos
}

test -e ${CPUTREEDIR}/$1/cpu.bcm_rt_runtimes_us && echo 200000,200000 > ${CPUTREEDIR}/cpu.bcm_rt_runtimes_us

# RT runtime allocations for the RT groups.  Units are in microseconds.
# $1: Group name
# $2: normal priority share.  RT groups are not expected to have any
#     normal priority processes, but give them a small share anyways.
#     Normal priority cpu time sharing is done like a weighted round
#     robin, so if a group does not use its share, the other groups can
#     use it, so there is no waste by allocating a share to the RT groups.
# $3: RT cpu time allocation.  This is used by the default cgroups algorithm.
#     This is only used if BCM_CGROUP_BCM is not defined.
#     If BCM_CGROUP_BCM is defined, then this paramter is not available.
# $4-$11: these parameters are used by BCM_CGROUP_BCM is defined.  See 
#     external documentation for more details.
#           $1              $2    $3   $4(min:0) $5(nom:0) $6(max:0) $7(steal:0) $8(min:1) $9(nom:1) $10(max:1) $11(steal:1)
allocateCpu rt              512 199000   199000    199000    199000        99      199000    199000    199000      99
allocateCpu rt/high         128   4000     2000      4000     10000        90        2000      4000     10000      90
allocateCpu rt/voip-dsp     128  60000        0         0         0        99        1000    120000    150000      10
allocateCpu rt/wifi-video   128  50000     1000    100000    150000        20           0         0         0      99
allocateCpu rt/wifi-data    128  25000        0         0         0        99        1000     50000    199000      20
allocateCpu rt/media        128  18000     1000     15000    199000        10        1000     20000    199000      30
allocateCpu rt/data         128  42000     1000     80000    199000        30        1000      5000    199000      40

# RT runtime allocations for the non-rt tasks.  Units are in microseconds.
# Give a little RT runtime to non-rt tasks to guarantee them some runtime even
# when RT tasks are trying to use up all cpu time.
allocateCpu normal         1024   1000     1000      1000      1000        99        1000      1000      1000      99
allocateCpu normal/osgi     512      0        0         0         0        99           0         0         0      99
allocateCpu normal/default  512   1000     1000      1000      1000        99        1000      1000      1000      99


# put the init thread into the normal group ASAP so that
# all future userspace threads will start out in the normal group.
# Once smd starts, it becomes the controller for priorities and cgroups.
echo 1 > ${CPUTREEDIR}/normal/default/tasks

exit 0
