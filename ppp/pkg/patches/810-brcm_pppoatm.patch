--- a/pppd/plugins/Makefile.linux
+++ b/pppd/plugins/Makefile.linux
@@ -11,7 +11,7 @@ LIBDIR = $(DESTDIR)/lib/pppd/$(VERSION)
 
 SUBDIRS := rp-pppoe pppoatm pppol2tp pptp
 # Uncomment the next line to include the radius authentication plugin
-SUBDIRS += radius
+SUBDIRS += radius pppoatm
 PLUGINS := minconn.so passprompt.so passwordfd.so winbind.so
 
 # This setting should match the one in ../Makefile.linux
--- a/pppd/plugins/pppoatm/Makefile.linux
+++ b/pppd/plugins/pppoatm/Makefile.linux
@@ -1,6 +1,6 @@
 #CC	= gcc
 COPTS	= -O2 -g
-CFLAGS	= $(COPTS) -I../.. -I../../../include -fPIC
+CFLAGS	= $(COPTS) -I../.. -I../../../include -fPIC -DCONFIG_BCM_KF_ATM_BACKEND
 LDFLAGS	= -shared
 INSTALL	= install
 
--- a/pppd/plugins/pppoatm/pppoatm.c
+++ b/pppd/plugins/pppoatm/pppoatm.c
@@ -69,18 +69,23 @@ int (*old_setdevname_hook)(const char* c
 static int setdevname_pppoatm(const char *cp, const char **argv, int doit)
 {
 	struct sockaddr_atmpvc addr;
+	char *pvc;
 	extern struct stat devstat;
+
 	if (device_got_set)
 		return 0;
 	//info("PPPoATM setdevname_pppoatm: '%s'", cp);
+	if ((pvc = strchr(cp, '.')) == NULL)
+		return 0;
 	memset(&addr, 0, sizeof addr);
-	if (text2atm(cp, (struct sockaddr *) &addr, sizeof(addr),
+	if (text2atm(pvc + 1, (struct sockaddr *) &addr, sizeof(addr),
 	    T2A_PVC | T2A_NAME | T2A_WILDCARD) < 0) {
                if(doit)
-                   info("atm does not recognize: %s", cp);
+                   info("atm does not recognize: %s", pvc + 1);
 		return 0;
            }
 	if (!doit) return 1;
+	*pvc = '\0';
 	//if (!dev_set_ok()) return -1;
 	memcpy(&pvcaddr, &addr, sizeof pvcaddr);
 	strlcpy(devnam, cp, sizeof devnam);
@@ -108,13 +113,14 @@ static void no_device_given_pppoatm(void
 static void set_line_discipline_pppoatm(int fd)
 {
 	struct atm_backend_ppp be;
-	be.backend_num = ATM_BACKEND_PPP;
+	be.backend_num = ATM_BACKEND_PPP_BCM;
 	if (!llc_encaps)
 		be.encaps = PPPOATM_ENCAPS_VC;
 	else if (!vc_encaps)
 		be.encaps = PPPOATM_ENCAPS_LLC;
 	else
 		be.encaps = PPPOATM_ENCAPS_AUTODETECT;
+
 	if (ioctl(fd, ATM_SETBACKEND, &be) < 0)
 		fatal("ioctl(ATM_SETBACKEND): %m");
 }
@@ -163,7 +169,18 @@ static int connect_pppoatm(void)
 
 static void disconnect_pppoatm(void)
 {
-	close(pppoa_fd);
+	if (pppoa_fd > 0) {
+		struct atm_backend_ppp be;
+		be.backend_num = ATM_BACKEND_PPP_BCM_CLOSE_DEV;
+
+		if (ioctl(pppoa_fd, ATM_SETBACKEND, &be) < 0)
+			fatal("ioctl(ATM_SETBACKEND): %m");
+		
+		close(pppoa_fd);
+		pppoa_fd = -1;
+
+		info("PPPoATM disconnect_pppoatm - SUCCESS");
+	}
 }
 
 void plugin_init(void)
