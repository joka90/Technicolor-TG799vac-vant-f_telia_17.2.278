--- a/drivers/leds/ledtrig-netdev.c
+++ b/drivers/leds/ledtrig-netdev.c
@@ -41,6 +41,8 @@
  *   tx:   LED blinks on transmitted data
  *   rx:   LED blinks on receive data
  *
+ * traffic_div_fact - division factor to check rx/tx is checked
+ *
  * Some suggestions:
  *
  *  Simple link status LED:
@@ -80,6 +82,9 @@ struct led_netdev_data {
 
 	char device_name[MAX_NETDEVS][IFNAMSIZ];
 	unsigned interval;
+	unsigned traffic_div_fact;
+	unsigned traffic_upd_cntr;
+	unsigned traffic;
 	unsigned mode;
 	unsigned link_up;
 	unsigned last_activity;
@@ -317,6 +322,46 @@ static ssize_t led_interval_store(struct
 
 static DEVICE_ATTR(interval, 0644, led_interval_show, led_interval_store);
 
+static ssize_t led_traffic_div_fact_show(struct device *dev,
+				 struct device_attribute *attr, char *buf)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct led_netdev_data *trigger_data = led_cdev->trigger_data;
+
+	spin_lock_bh(&trigger_data->lock);
+	sprintf(buf, "%u\n", trigger_data->traffic_div_fact);
+	spin_unlock_bh(&trigger_data->lock);
+
+	return strlen(buf) + 1;
+}
+
+static ssize_t led_traffic_div_fact_store(struct device *dev,
+				  struct device_attribute *attr, const char *buf, size_t size)
+{
+	struct led_classdev *led_cdev = dev_get_drvdata(dev);
+	struct led_netdev_data *trigger_data = led_cdev->trigger_data;
+	int ret = -EINVAL;
+	char *after;
+	unsigned long value = simple_strtoul(buf, &after, 10);
+	size_t count = after - buf;
+
+	if (*after && isspace(*after))
+		count++;
+
+	/* impose some basic bounds on the traffic division factor */
+	if (count == size && value >= 1 && value <= 1000) {
+		spin_lock_bh(&trigger_data->lock);
+		trigger_data->traffic_div_fact = value;
+		trigger_data->traffic_upd_cntr = trigger_data->traffic_div_fact;
+		spin_unlock_bh(&trigger_data->lock);
+		ret = count;
+	}
+
+	return ret;
+}
+
+static DEVICE_ATTR(traffic_div_fact, 0644, led_traffic_div_fact_show, led_traffic_div_fact_store);
+
 static int netdev_trig_notify(struct notifier_block *nb,
 			      unsigned long evt,
 			      void *dv)
@@ -388,15 +433,21 @@ static void netdev_trig_work(struct work
 		return;
 	}
 
-	new_activity = 0;
-	for (index = 0; index < MAX_NETDEVS; index++) {
-		nd_tmp = trigger_data->net_dev[index];
-		if (nd_tmp == NULL)
-			continue;
-		dev_stats = dev_get_stats(nd_tmp, &temp);
-		new_activity +=
-			((mode & MODE_TX) ? dev_stats->tx_packets : 0) +
-			((mode & MODE_RX) ? dev_stats->rx_packets : 0);
+	trigger_data->traffic_upd_cntr++;
+	if (trigger_data->traffic_upd_cntr >= trigger_data->traffic_div_fact) {
+		trigger_data->traffic_upd_cntr = 0;
+		new_activity = 0;
+		for (index = 0; index < MAX_NETDEVS; index++) {
+			nd_tmp = trigger_data->net_dev[index];
+			if (nd_tmp == NULL)
+				continue;
+			dev_stats = dev_get_stats(nd_tmp, &temp);
+			new_activity +=
+				((mode & MODE_TX) ? dev_stats->tx_packets : 0) +
+				((mode & MODE_RX) ? dev_stats->rx_packets : 0);
+		}
+		trigger_data->traffic = (trigger_data->last_activity != new_activity);
+		trigger_data->last_activity = new_activity;
 	}
 
 	if (mode & MODE_LINK) {
@@ -407,7 +458,7 @@ static void netdev_trig_work(struct work
 		/* ON -> OFF on activity */
 		if (trigger_data->led_cdev->brightness == LED_OFF) {
 			led_set_brightness(trigger_data->led_cdev, LED_FULL);
-		} else if (trigger_data->last_activity != new_activity) {
+		} else if (trigger_data->traffic) {
 			led_set_brightness(trigger_data->led_cdev, LED_OFF);
 		}
 	} else {
@@ -416,12 +467,11 @@ static void netdev_trig_work(struct work
 		/* OFF -> ON on activity */
 		if (trigger_data->led_cdev->brightness == LED_FULL) {
 			led_set_brightness(trigger_data->led_cdev, LED_OFF);
-		} else if (trigger_data->last_activity != new_activity) {
+		} else if (trigger_data->traffic) {
 			led_set_brightness(trigger_data->led_cdev, LED_FULL);
 		}
 	}
 
-	trigger_data->last_activity = new_activity;
 	schedule_delayed_work(&trigger_data->work, trigger_data->interval);
 }
 
@@ -443,6 +493,9 @@ static void netdev_trig_activate(struct
 
 	trigger_data->led_cdev = led_cdev;
 	trigger_data->interval = msecs_to_jiffies(50);
+	trigger_data->traffic_div_fact = 10;
+	trigger_data->traffic = 0;
+	trigger_data->traffic_upd_cntr = trigger_data->traffic_div_fact;
 
 	led_cdev->trigger_data = trigger_data;
 
@@ -455,10 +508,15 @@ static void netdev_trig_activate(struct
 	rc = device_create_file(led_cdev->dev, &dev_attr_interval);
 	if (rc)
 		goto err_out_mode;
+	rc = device_create_file(led_cdev->dev, &dev_attr_traffic_div_fact);
+	if (rc)
+		goto err_out_interval;
 
 	register_netdevice_notifier(&trigger_data->notifier);
 	return;
 
+err_out_interval:
+	device_remove_file(led_cdev->dev, &dev_attr_interval);
 err_out_mode:
 	device_remove_file(led_cdev->dev, &dev_attr_mode);
 err_out_device_name:
@@ -479,6 +537,7 @@ static void netdev_trig_deactivate(struc
 		device_remove_file(led_cdev->dev, &dev_attr_device_name);
 		device_remove_file(led_cdev->dev, &dev_attr_mode);
 		device_remove_file(led_cdev->dev, &dev_attr_interval);
+		device_remove_file(led_cdev->dev, &dev_attr_traffic_div_fact);
 
 		cancel_delayed_work_sync(&trigger_data->work);
 
